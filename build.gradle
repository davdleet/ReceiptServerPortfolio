plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

test {
	maxParallelForks = 1  // Run tests sequentially
	forkEvery = 1  // New JVM for each test class
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// Spring Boot Starter JPA (For Database)
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// PostgreSQL JDBC Driver
	runtimeOnly 'org.postgresql:postgresql'

	// Spring Boot Web Starter (For REST APIs)
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Lombok (Optional - for cleaner code)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// OAuth2 for Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// Spring Security (needed for authentication)
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Spring Boot Starter Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Json Web Tokens
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// ETC for development
	implementation 'org.json:json:20230618'

	/** Testing Dependencies **/

	// Spring Boot Test Starter
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// H2 Database (For testing)
	testImplementation 'com.h2database:h2'

	// ChatGPT
	implementation 'com.openai:openai-java:0.31.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs.add("-parameters")
}

processResources {
	from('src/main/resources') {
		include '**/*.traineddata'
	}
}